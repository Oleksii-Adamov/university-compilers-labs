// Generated by GNU Bison 3.8.1.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "parser.yy"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • unit $end\l"]
  0 -> 1 [style=dashed label="unit"]
  0 -> 2 [style=dashed label="statements"]
  0 -> "0R2" [style=solid]
 "0R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: unit • $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 unit: statements •\l  3 statements: statements • statement\l"]
  2 -> 4 [style=solid label="IDENTIFIER"]
  2 -> 5 [style=solid label="INTEGER_LITERAL"]
  2 -> 6 [style=dashed label="statement"]
  2 -> 7 [style=dashed label="expression"]
  2 -> 8 [style=dashed label="literal_expression"]
  2 -> 9 [style=dashed label="variable_expression"]
  2 -> 10 [style=dashed label="binary_expression"]
  2 -> "2R1" [style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: unit $end •\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l  9 variable_expression: IDENTIFIER •\l"]
  4 -> "4R9" [style=solid]
 "4R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l  8 literal_expression: INTEGER_LITERAL •\l"]
  5 -> "5R8" [style=solid]
 "5R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l  3 statements: statements statement •\l"]
  6 -> "6R3" [style=solid]
 "6R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l  4 statement: expression • STATEMENT_SEPARATOR\l 10 binary_expression: expression • BINARY_OPERATOR expression\l"]
  7 -> 11 [style=solid label="BINARY_OPERATOR"]
  7 -> 12 [style=solid label="STATEMENT_SEPARATOR"]
  8 [label="State 8\n\l  5 expression: literal_expression •\l"]
  8 -> "8R5" [style=solid]
 "8R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l  6 expression: variable_expression •\l"]
  9 -> "9R6" [style=solid]
 "9R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l  7 expression: binary_expression •\l"]
  10 -> "10R7" [style=solid]
 "10R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l 10 binary_expression: expression BINARY_OPERATOR • expression\l"]
  11 -> 4 [style=solid label="IDENTIFIER"]
  11 -> 5 [style=solid label="INTEGER_LITERAL"]
  11 -> 13 [style=dashed label="expression"]
  11 -> 8 [style=dashed label="literal_expression"]
  11 -> 9 [style=dashed label="variable_expression"]
  11 -> 10 [style=dashed label="binary_expression"]
  12 [label="State 12\n\l  4 statement: expression STATEMENT_SEPARATOR •\l"]
  12 -> "12R4" [style=solid]
 "12R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l 10 binary_expression: expression • BINARY_OPERATOR expression\l 10                  | expression BINARY_OPERATOR expression •\l"]
  13 -> 11 [style=solid label="BINARY_OPERATOR"]
  13 -> "13R10d" [label="[BINARY_OPERATOR]", style=solid]
 "13R10d" [label="R10", fillcolor=5, shape=diamond, style=filled]
  13 -> "13R10" [style=solid]
 "13R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
}
